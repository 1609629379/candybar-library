package com.dm.material.dashboard.candybar.adapters;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.graphics.Palette;
import android.support.v7.widget.CardView;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.dm.material.dashboard.candybar.R;
import com.dm.material.dashboard.candybar.fragments.dialog.WallpaperOptionsFragment;
import com.dm.material.dashboard.candybar.helpers.ColorHelper;
import com.dm.material.dashboard.candybar.items.Wallpaper;
import com.dm.material.dashboard.candybar.preferences.Preferences;
import com.dm.material.dashboard.candybar.utils.ImageConfig;
import com.dm.material.dashboard.candybar.utils.listeners.PreviewWallpaperListener;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;

import java.util.List;

/*
 * CandyBar - Material Dashboard
 *
 * Copyright (c) 2014-2016 Dani Mahardhika
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

public class WallpapersAdapter extends RecyclerView.Adapter<WallpapersAdapter.ViewHolder> {

    private final Context mContext;
    private final List<Wallpaper> mWallpapers;

    public static boolean sIsClickable = true;
    private final boolean mIsAutoGeneratedColor;
    private boolean mIsShowTips;
    private final boolean mIsShowName;

    private static final int TYPE_HEADER = 0;
    private static final int TYPE_CONTENT = 1;

    public WallpapersAdapter(@NonNull Context context, @NonNull List<Wallpaper> wallpapers) {
        mContext = context;
        mWallpapers = wallpapers;
        mIsAutoGeneratedColor = mContext.getResources().getBoolean(
                R.bool.card_wallpaper_auto_generated_color);
        mIsShowName = mContext.getResources().getBoolean(R.bool.wallpaper_show_name_author);
        mIsShowTips = Preferences.getPreferences(mContext).isShowWallpaperTips();
    }

    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = null;
        if (viewType == TYPE_HEADER) {
            view = LayoutInflater.from(mContext).inflate(
                    R.layout.fragment_wallpapers_item_header, parent, false);
        } else if (viewType == TYPE_CONTENT) {
            if (mIsShowName) {
                view = LayoutInflater.from(mContext).inflate(
                        R.layout.fragment_wallpapers_item_grid, parent, false);
            } else {
                view = LayoutInflater.from(mContext).inflate(
                        R.layout.fragment_wallpapers_item_grid_alt, parent, false);
            }
        }
        return new ViewHolder(view, viewType);
    }

    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        if (holder.holderId == TYPE_HEADER) {
            if (mIsShowTips)
                holder.wallpaperTips.setVisibility(View.VISIBLE);
            else holder.wallpaperTips.setVisibility(View.GONE);
        } else if (holder.holderId == TYPE_CONTENT) {
            int finalPos = mIsShowTips ? position - 1 : position;
            if (mIsShowName) {
                holder.name.setText(mWallpapers.get(finalPos).getName());
                holder.author.setText(mWallpapers.get(finalPos).getAuthor());
            }

            ImageLoader.getInstance().displayImage(mWallpapers.get(finalPos).getThumbUrl(), holder.image,
                    ImageConfig.getImageOptions(true, Preferences.getPreferences(mContext)
                            .isCacheAllowed()), new SimpleImageLoadingListener() {
                        @Override
                        public void onLoadingStarted(String imageUri, View view) {
                            super.onLoadingStarted(imageUri, view);
                            if (mIsAutoGeneratedColor && mIsShowName) {
                                int vibrant = ColorHelper.getAttributeColor(
                                        mContext, R.attr.card_background);
                                holder.card.setCardBackgroundColor(vibrant);
                                int primary = ColorHelper.getAttributeColor(
                                        mContext, android.R.attr.textColorPrimary);
                                holder.name.setTextColor(primary);
                                holder.author.setTextColor(primary);
                            }
                        }

                        @Override
                        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                            super.onLoadingComplete(imageUri, view, loadedImage);
                            if (mIsAutoGeneratedColor && mIsShowName) {
                                if (loadedImage != null) {
                                    Palette.from(loadedImage).generate(palette -> {
                                        int vibrant = ColorHelper.getAttributeColor(
                                                mContext, R.attr.card_background);
                                        int color = palette.getVibrantColor(vibrant);
                                        if (color == vibrant)
                                            color = palette.getMutedColor(vibrant);
                                        holder.card.setCardBackgroundColor(color);
                                        int text = ColorHelper.getTitleTextColor(mContext, color);
                                        holder.name.setTextColor(text);
                                        holder.author.setTextColor(text);
                                    });
                                }
                            }
                        }
                    });
        }
    }

    @Override
    public int getItemCount() {
        return mIsShowTips ? mWallpapers.size() + 1 : mWallpapers.size();
    }

    @Override
    public int getItemViewType(int position) {
        return position == 0 && mIsShowTips ? TYPE_HEADER : TYPE_CONTENT;
    }

    class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,
            View.OnLongClickListener {

        CardView wallpaperTips;
        TextView gotIt;
        CardView card;
        LinearLayout container;
        ImageView image;
        TextView name;
        TextView author;
        int holderId;

        ViewHolder(View itemView, int viewType) {
            super(itemView);
            if (viewType == TYPE_HEADER) {
                wallpaperTips = (CardView) itemView.findViewById(R.id.wallpaper_tips);
                gotIt = (TextView) itemView.findViewById(R.id.gotit);
                gotIt.setOnClickListener(this);
                gotIt.setBackgroundResource(Preferences.getPreferences(mContext).isDarkTheme() ?
                        R.drawable.button_accent_dark : R.drawable.button_accent);

                holderId = TYPE_HEADER;
            } else if (viewType == TYPE_CONTENT) {
                image = (ImageView) itemView.findViewById(R.id.image);

                if (mIsShowName) {
                    card = (CardView) itemView.findViewById(R.id.card);
                    container = (LinearLayout) itemView.findViewById(R.id.container);
                    name = (TextView) itemView.findViewById(R.id.name);
                    author = (TextView) itemView.findViewById(R.id.author);
                    container.setOnClickListener(this);
                    container.setOnLongClickListener(this);
                } else {
                    image.setOnClickListener(this);
                    image.setOnLongClickListener(this);
                }

                holderId = TYPE_CONTENT;
            }
        }

        @Override
        public void onClick(View view) {
            int id = view.getId();
            int position = mIsShowTips ? getAdapterPosition() - 1 : getAdapterPosition();
            if (id == R.id.container || id == R.id.image) {
                if (sIsClickable) {
                    sIsClickable = false;
                    try {
                        PreviewWallpaperListener listener = (PreviewWallpaperListener) mContext;
                        listener.previewWallpaper(image, mWallpapers.get(position),
                                ((BitmapDrawable) image.getDrawable()).getBitmap());
                    } catch (Exception e) {
                        sIsClickable = true;
                    }
                }
            } else if (id == R.id.gotit) {
                mIsShowTips = false;
                Preferences.getPreferences(mContext).showWallpaperTips(false);
                notifyDataSetChanged();
            }
        }

        @Override
        public boolean onLongClick(View view) {
            int id = view.getId();
            int position = mIsShowTips ? getAdapterPosition() - 1 : getAdapterPosition();
            if (id == R.id.container || id == R.id.image) {
                WallpaperOptionsFragment.showWallpaperOptionsDialog(
                        ((AppCompatActivity) mContext).getSupportFragmentManager(),
                        mWallpapers.get(position).getURL(),
                        mWallpapers.get(position).getName());
                return true;
            }
            return false;
        }

    }

}
